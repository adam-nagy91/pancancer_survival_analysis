# List of tumor types
tumor_types = c("blca",
                "brca",
                "cesc",
                "coad",
                "esca",
                "gbm",
                "hnsc",
                "kirc",
                "kirp",
                "laml",
                "lgg",
                "lihc",
                "luad",
                "lusc",
                "ov",
                "paad",
                "pcpg",
                "prad",
                "read",
                "sarc",
                "skcm",
                "stad",
                "tgct",
                "thca",
                "thym",
                "ucec")

for (a in 1:length(tumor_types)){
  
  tumor_data = list.files(pattern = tumor_types[[a]], recursive = T, ignore.case = T)
  
  # ==== Reading table with survival information ====
  surv_info = read.table(tumor_data[grepl(".*clinical.tsv", tumor_data)], sep = "\t", fill = T, header = T, as.is = T, quote = "")
  rownames(surv_info) = as.character(surv_info$submitter_id)
  
  # ==== Reading table with other clinical information ====
  clinical = read.table(tumor_data[grepl(".*patient.*", tumor_data)], sep = "\t", fill = T, header = T, as.is = T, quote = "")
  colnames(clinical) = as.character(unlist(clinical[1, ]))
  clinical = clinical[-1:-2, ]
  clinical = as.data.frame(sapply(clinical, function(x) gsub("\\[.*\\]", "", x)))
  rownames(clinical) = as.character(clinical$bcr_patient_barcode)
  
  tryCatch(expr = {
    
    # ==== Reading table with treatment data ====
    drugs = read.table(tumor_data[grepl(".*drug.*", tumor_data)], sep = "\t",fill = T, header = T, as.is = T, quote = "")
    colnames(drugs) = as.character(unlist(drugs[1, ]))
    drugs = drugs[-1:-2, ]
    drugs = as.data.frame(sapply(drugs, function(x) gsub("\\[.*\\]", "", x)))
    
  }, error = function(e){
    print(a)
  })
  
  final_table = as.data.frame(matrix(nrow = nrow(clinical), ncol = 14))
  colnames(final_table) = c("Tumor_type",
                            "OS_time (months)",
                            "OS_event (1=death)",
                            "Stage (0=Stage0;1=Stage1;2=Stage2;3=Stage3;4=Stage4)",
                            "AJCC_T (0=no evidence of tumor;1=T1;2=T2;3=T3;4=T4;X=main tumor cannot be measured)",
                            "AJCC_N (0=no reg.ln.met.;1=reg.ln.met.;2=tumor spread between N1 and N3;3=tumour spread to distant or numerous reg. ln.;X=lymph nodes cannot be assessed)",
                            "AJCC_M (0=no metastasis;1=metastasis;X=metastasis cannot be measured)",
                            "Grade (1=grade1;2=grade2;3=grade3;4=grade4)",
                            "Therapy_type",
                            "Drug_name",
                            "Radiation_therapy",
                            "Gender(0=female;1=male)",
                            "Race(1=white;2=asian;3=black/african american)", 
                            "Age")
  
  rownames(final_table) = as.character(clinical$bcr_patient_barcode)
  surv_info = surv_info[as.character(clinical$bcr_patient_barcode), ]
  
  for (s in 1:nrow(surv_info)){
    
    # Combine the "days_to_death" and "days_to_last_follow_up" columns
    if (surv_info[s, "days_to_death"] == "--"){
      
      final_table[s, 2] = as.numeric(surv_info[s, "days_to_last_follow_up"]) / 30
      
    } else {
      
      final_table[s, 2] = as.numeric(surv_info[s, "days_to_death"]) / 30
      
    }
    
    # OS events: alive=0, dead=1 
    if (surv_info[s, "vital_status"] == "alive"){
      
      final_table[s, 3] = 0
      
    } else if (surv_info[s, "vital_status"] == "dead") {
      
      final_table[s, 3] = 1
      
    }
    
  }
  
  for (b in 1:nrow(clinical)){
    
    # Tumor type
    final_table[b, 1] = as.character(clinical[b, "tumor_tissue_site"])
    
    tryCatch(expr = {
      
      # Stage
      if (as.character(clinical[b, "pathologic_stage"]) == ""){
        final_table[b, 4] = ""
        
      } else if(as.character(clinical[b, "pathologic_stage"]) == "Stage 0"){
        final_table[b, 4] = 0 # Stage 0
        
      } else if (as.character(clinical[b, "pathologic_stage"]) == "Stage I" | as.character(clinical[b, "pathologic_stage"]) == "Stage IA" | as.character(clinical[b, "pathologic_stage"]) == "Stage IB" | as.character(clinical[b, "pathologic_stage"]) == "Stage IC"){
        final_table[b, 4] = 1 # Stage 1
        
      } else if (as.character(clinical[b, "pathologic_stage"]) == "Stage II" | as.character(clinical[b, "pathologic_stage"]) == "Stage IIA" | as.character(clinical[b, "pathologic_stage"]) == "Stage IIB" | as.character(clinical[b, "pathologic_stage"]) == "Stage IIC"){
        final_table[b, 4] = 2 # Stage 2
        
      } else if (as.character(clinical[b, "pathologic_stage"]) == "Stage III" | as.character(clinical[b, "pathologic_stage"]) == "Stage IIIA" | as.character(clinical[b, "pathologic_stage"]) == "Stage IIIB" | as.character(clinical[b, "pathologic_stage"]) == "Stage IIIC"){
        final_table[b, 4] = 3 # Stage 3
        
      } else if (as.character(clinical[b, "pathologic_stage"]) == "Stage IV" | as.character(clinical[b, "pathologic_stage"]) == "Stage IVA" | as.character(clinical[b, "pathologic_stage"]) == "Stage IVB" | as.character(clinical[b, "pathologic_stage"]) == "Stage IVC"){
        final_table[b, 4] = 4 # Stage 4
        
      }
      
    }, error = function(e){
      print(b)
    })
    
    tryCatch(expr = {
      
      # AJCC_T
      if (as.character(clinical[b, "pathologic_T"]) == ""){
        final_table[b, 5] = ""
        
      } else if(grepl(".*T0.*", clinical[b, "pathologic_T"])){
        final_table[b, 5] = 0 # no evidence of tumour
        
      } else if (grepl(".*T1.*", clinical[b, "pathologic_T"])){
        final_table[b, 5] = 1 # extension of the primary tumor
        
      } else if (grepl(".*T2.*", clinical[b, "pathologic_T"])){
        final_table[b, 5] = 2 # extension of the primary tumor
        
      } else if (grepl(".*T3.*", clinical[b, "pathologic_T"])){
        final_table[b, 5] = 3 # extension of the primary tumor
        
      } else if (grepl(".*T4.*", clinical[b, "pathologic_T"])){
        final_table[b, 5] = 4 # extension of the primary tumor
        
      } else if (grepl(".*TX.*", clinical[b, "pathologic_T"])){
        final_table[b, 5] = "X" # main tumor cannot be measured
        
      }
      
    }, error = function(e){
      print(b)
    })
    
    tryCatch(expr = {
      
      # AJCC_N 
      if (as.character(clinical[b, "pathologic_N"]) == ""){
        final_table[b, 6] = ""
        
      } else if(grepl(".*N0.*", clinical[b, "pathologic_N"])){
        final_table[b, 6] = 0 # no regional lymph nodes metastasis
        
      } else if (grepl(".*N1.*", clinical[b, "pathologic_N"])){
        final_table[b, 6] = 1 # regional lymph node metastasis present
        
      } else if (grepl(".*N2.*", clinical[b, "pathologic_N"])){
        final_table[b, 6] = 2 # tumour spread to an extent between N1 and N3
        
      } else if (grepl(".*N3.*", clinical[b, "pathologic_N"])){
        final_table[b, 6] = 3 # tumour spread to more distant or numerous regional lymph nodes
        
      } else if (grepl(".*NX.*", clinical[b, "pathologic_N"])){
        final_table[b, 6] = "X" # lymph nodes cannot be assessed
        
      }
      
    }, error = function(e){
      print(b)
    })
    
    tryCatch(expr = {
      
      # AJCC_M
      if (as.character(clinical[b, "pathologic_M"]) == ""){
        final_table[b, 7] = ""
        
      } else if (grepl(".*M0.*", clinical[b, "pathologic_M"])){
        final_table[b, 7] = 0 # Cancer has not spread to other parts of the body
        
      } else if (grepl(".*M1.*", clinical[b, "pathologic_M"])){
        final_table[b, 7] = 1 # Cancer has spread to other parts of the body
        
      } else if (grepl(".*MX.*", clinical[b, "pathologic_M"])){
        final_table[b, 7] = "X" # Metastasis cannot be measured
        
      }
      
    }, error = function(e){
      print(b)
    })
    
    tryCatch(expr = {
      
      # Grade
      if (as.character(clinical[b, "neoplasm_histologic_grade"]) == ""){
        final_table[b, 8] = ""
        
      } else if(as.character(clinical[b, "neoplasm_histologic_grade"]) == "G1"){
        final_table[b, 8] = 1 # Grade 1
        
      } else if (as.character(clinical[b, "neoplasm_histologic_grade"]) == "G2"){
        final_table[b, 8] = 2 # Grade 2
        
      } else if (as.character(clinical[b, "neoplasm_histologic_grade"]) == "G3"){
        final_table[b, 8] = 3 # Grade 3
        
      } else if (as.character(clinical[b, "neoplasm_histologic_grade"]) == "G4"){
        final_table[b, 8] = 4 # Grade 4
        
      }
      
    }, error = function(e){
      print(b)
    })
    
    tryCatch(expr = {
      
      # Radiation therapy
      final_table[b, 11] = as.character(clinical[b, "radiation_therapy"])
      
    }, error = function(e){
      print(b)
    })
    
    tryCatch(expr = {
      
      # Gender 
      if (as.character(clinical[b, "gender"] == "")){
        final_table[b, 12] = ""
        
      } else if (as.character(clinical[b, "gender"] == "FEMALE")){
        final_table[b, 12] = 0
        
      } else if (as.character(clinical[b, "gender"] == "MALE")){
        final_table[b, 12] = 1
        
      }
      
    }, error = function(e){
      print(b)
    })
    
    tryCatch(expr = {
      
      # Race
      if (as.character(clinical[b, "race"] == "")){
        final_table[b, 13] = ""
        
      } else if (as.character(clinical[b, "race"] == "WHITE")){
        final_table[b, 13] = 1
        
      } else if (as.character(clinical[b, "race"] == "ASIAN")){
        final_table[b, 13] = 2
        
      } else if (as.character(clinical[b, "race"] == "BLACK OR AFRICAN AMERICAN")){
        final_table[b, 13] = 3
        
      }
      
    }, error = function(e){
      print(b)
    })  
    
    
    tryCatch(expr = {
      
      # Age at initial pathologic diagnosis
      final_table[b, 14] = as.numeric(clinical[b, "age_at_initial_pathologic_diagnosis"])
      
    }, error = function(e){
      print(b)
    })
    
  }
  
  tryCatch(expr = {
    
    # Treatment data
    treated_patients = unique(as.character(drugs$bcr_patient_barcode))
    
    for (t in 1:length(treated_patients)) {
      
      patient_w_drug =  drugs[drugs$bcr_patient_barcode == treated_patients[[t]], ]
      final_table[treated_patients[[t]], 9] = paste(unique(as.character(patient_w_drug$therapy_type)), collapse = ",")
      final_table[treated_patients[[t]], 10] = paste(as.character(patient_w_drug$drug_name), collapse = ",")
      
    }
    
  }, error = function(e){
    print(b)
  })
  
  merged_table = cbind(final_table, clinical)
  write.table(merged_table, paste("TCGA", tumor_types[[a]], "clinical_data.txt", sep = "_"), sep = "\t", na = "", quote = F, col.names = NA)
  # Merging the clinical data of all cancers into one table
  # clinical_table = rbind(clinical_table, final_table)
  
}
